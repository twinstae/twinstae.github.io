import { j as element, z as space, k as claim_element, B as claim_space, l as children, d as detach_dev, n as attr_dev, o as add_location, i as insert_hydration_dev, E as append_hydration_dev, Q as listen_dev, H as noop, M as run_all, g as dispatch_dev, s as validate_slots, P as onMount, S as SvelteComponentDev, w as init, x as safe_not_equal } from '../index-328232cc.js';
import '../index-e9702746.js';

/* src/components/DarkCheckBox.svelte generated by Svelte v3.46.4 */
const file = "src/components/DarkCheckBox.svelte";

function create_fragment(ctx) {
	let input;
	let t0;
	let label;
	let span0;
	let t1;
	let span1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			t0 = space();
			label = element("label");
			span0 = element("span");
			t1 = space();
			span1 = element("span");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", { type: true, id: true, class: true });
			t0 = claim_space(nodes);
			label = claim_element(nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			span0 = claim_element(label_nodes, "SPAN", { class: true });
			children(span0).forEach(detach_dev);
			t1 = claim_space(label_nodes);
			span1 = claim_element(label_nodes, "SPAN", { class: true });
			children(span1).forEach(detach_dev);
			label_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "id", "darkmode-checkbox");
			attr_dev(input, "class", "svelte-ixwbnm");
			add_location(input, file, 15, 0, 340);
			attr_dev(span0, "class", "svelte-ixwbnm");
			add_location(span0, file, 17, 2, 471);
			attr_dev(span1, "class", "svelte-ixwbnm");
			add_location(span1, file, 18, 2, 487);
			attr_dev(label, "for", "darkmode-checkbox");
			attr_dev(label, "class", "svelte-ixwbnm");
			add_location(label, file, 16, 0, 437);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, input, anchor);
			input.checked = /*is_dark*/ ctx[0];
			insert_hydration_dev(target, t0, anchor);
			insert_hydration_dev(target, label, anchor);
			append_hydration_dev(label, span0);
			append_hydration_dev(label, t1);
			append_hydration_dev(label, span1);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*input_change_handler*/ ctx[2]),
					listen_dev(input, "change", /*on_dark_change*/ ctx[1], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*is_dark*/ 1) {
				input.checked = /*is_dark*/ ctx[0];
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(label);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('DarkCheckBox', slots, []);
	let is_dark = false;

	function on_dark_change() {
		localStorage.setItem("dark", is_dark);
		document.getElementsByTagName("html")[0].className = is_dark ? "dark" : "light";
	}

	onMount(() => {
		$$invalidate(0, is_dark = document.getElementsByTagName("html")[0].className == "dark");
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DarkCheckBox> was created with unknown prop '${key}'`);
	});

	function input_change_handler() {
		is_dark = this.checked;
		$$invalidate(0, is_dark);
	}

	$$self.$capture_state = () => ({ onMount, is_dark, on_dark_change });

	$$self.$inject_state = $$props => {
		if ('is_dark' in $$props) $$invalidate(0, is_dark = $$props.is_dark);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [is_dark, on_dark_change, input_change_handler];
}

class DarkCheckBox extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DarkCheckBox",
			options,
			id: create_fragment.name
		});
	}
}

export { DarkCheckBox as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGFya0NoZWNrQm94LjE2OWFkNTBiLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9EYXJrQ2hlY2tCb3guc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgbGV0IGlzX2RhcmsgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvbl9kYXJrX2NoYW5nZSgpe1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiZGFya1wiLCBpc19kYXJrKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0uY2xhc3NOYW1lID0gaXNfZGFyayA/IFwiZGFya1wiIDogXCJsaWdodFwiO1xuICB9XG5cbiAgb25Nb3VudCgoKT0+e1xuICAgIGlzX2RhcmsgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImh0bWxcIilbMF0uY2xhc3NOYW1lID09IFwiZGFya1wiO1xuICB9KVxuPC9zY3JpcHQ+XG5cbjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBpZD1cImRhcmttb2RlLWNoZWNrYm94XCIgYmluZDpjaGVja2VkPXtpc19kYXJrfSBvbjpjaGFuZ2U9e29uX2RhcmtfY2hhbmdlfT5cbjxsYWJlbCBmb3I9XCJkYXJrbW9kZS1jaGVja2JveFwiPlxuICA8c3Bhbj48L3NwYW4+XG4gIDxzcGFuPjwvc3Bhbj5cbjwvbGFiZWw+XG5cbjxzdHlsZT5cbmxhYmVsIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG5zcGFuOmxhc3QtY2hpbGQge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHdpZHRoOiA1MHB4O1xuICBoZWlnaHQ6IDI2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDE1cHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkIGdyYXk7XG4gIGJhY2tncm91bmQ6IHZhcigtLXdoaXRlKTtcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3M7XG59XG5cbnNwYW46bGFzdC1jaGlsZDo6YmVmb3JlLFxuc3BhbjpsYXN0LWNoaWxkOjphZnRlciB7XG4gIGNvbnRlbnQ6IFwiXCI7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cblxuc3BhbjpsYXN0LWNoaWxkOjpiZWZvcmUge1xuICBsZWZ0OiAtMXB4O1xuICB0b3A6IC0xcHg7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG4gIGJhY2tncm91bmQ6IHZhcigtLXdoaXRlKTtcbiAgYm9yZGVyOiAycHggc29saWQgZ3JheTtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB6LWluZGV4OiAxO1xuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcztcbn1cblxuc3BhbjpsYXN0LWNoaWxkOjphZnRlciB7XG4gIHRvcDogMC4yNXJlbTtcbiAgcmlnaHQ6IDAuN3JlbTtcbiAgd2lkdGg6IDEycHg7XG4gIGhlaWdodDogMTJweDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICBjb250ZW50OiBcIvCfjJ5cIjtcbn1cblxuW3R5cGU9XCJjaGVja2JveFwiXSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogLTk5OTlweDtcbn1cblxuW3R5cGU9XCJjaGVja2JveFwiXTpjaGVja2VkICsgbGFiZWwgc3BhbjpsYXN0LWNoaWxkIHtcbiAgYmFja2dyb3VuZDogdmFyKC0tYmxhY2spO1xufVxuXG5bdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWQgKyBsYWJlbCBzcGFuOmxhc3QtY2hpbGQ6OmJlZm9yZSB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgyNHB4KTtcbn1cblxuW3R5cGU9XCJjaGVja2JveFwiXTpjaGVja2VkICsgbGFiZWwgc3BhbjpsYXN0LWNoaWxkOjphZnRlciB7XG4gIHdpZHRoOiAxNHB4O1xuICBoZWlnaHQ6IDE0cHg7XG4gIC8qcmlnaHQ6IGF1dG87Ki9cbiAgbGVmdDogMC4ycmVtO1xuICB0b3A6IDAuMXJlbTtcbiAgY29udGVudDogXCLwn4ycXCI7XG4gIHRyYW5zZm9ybTogc2NhbGUoLjgpO1xufVxuPC9zdHlsZT5cblxuXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FlQSxvQkFBK0YsQ0FBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBOytCQUFuQyxHQUFPLENBQUEsQ0FBQSxDQUFBLENBQUE7O0dBQ25FLG9CQUdPLENBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTtHQUZMLG9CQUFZLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQSxDQUFBOztHQUNaLG9CQUFZLENBQUEsS0FBQSxFQUFBLEtBQUEsQ0FBQSxDQUFBOzs7OztvREFIa0UsR0FBYyxDQUFBLENBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxDQUFBOzs7Ozs7OztnQ0FBbEMsR0FBTyxDQUFBLENBQUEsQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWjdELENBQUEsSUFBQSxPQUFPLEdBQUcsS0FBSyxDQUFBOztVQUVWLGNBQWMsR0FBQTtBQUNyQixFQUFBLFlBQVksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQSxDQUFBO0FBQ3BDLEVBQUEsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBRSxDQUFBLENBQUMsQ0FBRSxDQUFBLFNBQVMsR0FBRyxPQUFPLEdBQUcsTUFBTSxHQUFHLE9BQU8sQ0FBQTs7O0NBR2pGLE9BQU8sQ0FBQSxNQUFBO2tCQUNMLE9BQU8sR0FBRyxRQUFRLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUUsU0FBUyxJQUFJLE1BQU0sQ0FBQSxDQUFBOzs7Ozs7Ozs7O0VBSWQsT0FBTyxHQUFBLElBQUEsQ0FBQSxPQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
