import { N as svg_element, O as claim_svg_element, l as children, d as detach_dev, n as attr_dev, o as add_location, i as insert_hydration_dev, g as dispatch_dev, v as validate_each_argument, e as empty, H as noop, G as destroy_each, E as append_hydration_dev, s as validate_slots, P as onMount, S as SvelteComponentDev, w as init, x as safe_not_equal } from '../index-328232cc.js';
import '../index-e9702746.js';

/* src/components/Clock.svelte generated by Svelte v3.46.4 */
const file = "src/components/Clock.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (69:4) {#each [1, 2, 3, 4] as offset}
function create_each_block_1(ctx) {
	let line;
	let line_transform_value;

	const block = {
		c: function create() {
			line = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			line = claim_svg_element(nodes, "line", {
				class: true,
				y1: true,
				y2: true,
				transform: true
			});

			children(line).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(line, "class", "minor svelte-xt21sd");
			attr_dev(line, "y1", "42");
			attr_dev(line, "y2", "45");
			attr_dev(line, "transform", line_transform_value = "rotate(" + 6 * (/*minute*/ ctx[4] + /*offset*/ ctx[7]) + ")");
			add_location(line, file, 69, 6, 1150);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, line, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(line);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(69:4) {#each [1, 2, 3, 4] as offset}",
		ctx
	});

	return block;
}

// (66:2) {#each [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55] as minute}
function create_each_block(ctx) {
	let line;
	let line_transform_value;
	let each_1_anchor;
	let each_value_1 = [1, 2, 3, 4];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < 4; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			line = svg_element("line");

			for (let i = 0; i < 4; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			line = claim_svg_element(nodes, "line", {
				class: true,
				y1: true,
				y2: true,
				transform: true
			});

			children(line).forEach(detach_dev);

			for (let i = 0; i < 4; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(line, "class", "major svelte-xt21sd");
			attr_dev(line, "y1", "35");
			attr_dev(line, "y2", "45");
			attr_dev(line, "transform", line_transform_value = "rotate(" + 30 * /*minute*/ ctx[4] + ")");
			add_location(line, file, 66, 4, 1035);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, line, anchor);

			for (let i = 0; i < 4; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_hydration_dev(target, each_1_anchor, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(line);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(66:2) {#each [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55] as minute}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let svg;
	let circle;
	let line0;
	let line0_transform_value;
	let line1;
	let line1_transform_value;
	let g;
	let line2;
	let line3;
	let g_transform_value;
	let each_value = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < 12; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			circle = svg_element("circle");

			for (let i = 0; i < 12; i += 1) {
				each_blocks[i].c();
			}

			line0 = svg_element("line");
			line1 = svg_element("line");
			g = svg_element("g");
			line2 = svg_element("line");
			line3 = svg_element("line");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_svg_element(nodes, "svg", { viewBox: true, class: true });
			var svg_nodes = children(svg);
			circle = claim_svg_element(svg_nodes, "circle", { class: true, r: true });
			children(circle).forEach(detach_dev);

			for (let i = 0; i < 12; i += 1) {
				each_blocks[i].l(svg_nodes);
			}

			line0 = claim_svg_element(svg_nodes, "line", {
				class: true,
				y1: true,
				y2: true,
				transform: true
			});

			children(line0).forEach(detach_dev);

			line1 = claim_svg_element(svg_nodes, "line", {
				class: true,
				y1: true,
				y2: true,
				transform: true
			});

			children(line1).forEach(detach_dev);
			g = claim_svg_element(svg_nodes, "g", { transform: true });
			var g_nodes = children(g);
			line2 = claim_svg_element(g_nodes, "line", { class: true, y1: true, y2: true });
			children(line2).forEach(detach_dev);
			line3 = claim_svg_element(g_nodes, "line", { class: true, y1: true, y2: true });
			children(line3).forEach(detach_dev);
			g_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(circle, "class", "clock-face svelte-xt21sd");
			attr_dev(circle, "r", "48");
			add_location(circle, file, 62, 2, 907);
			attr_dev(line0, "class", "hour svelte-xt21sd");
			attr_dev(line0, "y1", "2");
			attr_dev(line0, "y2", "-20");
			attr_dev(line0, "transform", line0_transform_value = "rotate(" + (30 * /*hours*/ ctx[2] + /*minutes*/ ctx[1] / 2) + ")");
			add_location(line0, file, 74, 2, 1279);
			attr_dev(line1, "class", "minute svelte-xt21sd");
			attr_dev(line1, "y1", "4");
			attr_dev(line1, "y2", "-30");
			attr_dev(line1, "transform", line1_transform_value = "rotate(" + (6 * /*minutes*/ ctx[1] + /*seconds*/ ctx[0] / 10) + ")");
			add_location(line1, file, 77, 2, 1390);
			attr_dev(line2, "class", "second svelte-xt21sd");
			attr_dev(line2, "y1", "10");
			attr_dev(line2, "y2", "-38");
			add_location(line2, file, 81, 4, 1547);
			attr_dev(line3, "class", "second-counterweight svelte-xt21sd");
			attr_dev(line3, "y1", "10");
			attr_dev(line3, "y2", "2");
			add_location(line3, file, 82, 4, 1592);
			attr_dev(g, "transform", g_transform_value = "rotate(" + 6 * /*seconds*/ ctx[0] + ")");
			add_location(g, file, 80, 2, 1505);
			attr_dev(svg, "viewBox", "-50 -50 100 100");
			attr_dev(svg, "class", "svelte-xt21sd");
			add_location(svg, file, 61, 0, 873);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, svg, anchor);
			append_hydration_dev(svg, circle);

			for (let i = 0; i < 12; i += 1) {
				each_blocks[i].m(svg, null);
			}

			append_hydration_dev(svg, line0);
			append_hydration_dev(svg, line1);
			append_hydration_dev(svg, g);
			append_hydration_dev(g, line2);
			append_hydration_dev(g, line3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*hours, minutes*/ 6 && line0_transform_value !== (line0_transform_value = "rotate(" + (30 * /*hours*/ ctx[2] + /*minutes*/ ctx[1] / 2) + ")")) {
				attr_dev(line0, "transform", line0_transform_value);
			}

			if (dirty & /*minutes, seconds*/ 3 && line1_transform_value !== (line1_transform_value = "rotate(" + (6 * /*minutes*/ ctx[1] + /*seconds*/ ctx[0] / 10) + ")")) {
				attr_dev(line1, "transform", line1_transform_value);
			}

			if (dirty & /*seconds*/ 1 && g_transform_value !== (g_transform_value = "rotate(" + 6 * /*seconds*/ ctx[0] + ")")) {
				attr_dev(g, "transform", g_transform_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let hours;
	let minutes;
	let seconds;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Clock', slots, []);
	let time = new Date();

	onMount(() => {
		const interval = setInterval(
			() => {
				$$invalidate(3, time = new Date());
			},
			1000
		);

		return () => {
			clearInterval(interval);
		};
	});

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Clock> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ onMount, time, seconds, minutes, hours });

	$$self.$inject_state = $$props => {
		if ('time' in $$props) $$invalidate(3, time = $$props.time);
		if ('seconds' in $$props) $$invalidate(0, seconds = $$props.seconds);
		if ('minutes' in $$props) $$invalidate(1, minutes = $$props.minutes);
		if ('hours' in $$props) $$invalidate(2, hours = $$props.hours);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*time*/ 8) {
			// these automatically update when `time`
			// changes, because of the `$:` prefix
			$: $$invalidate(2, hours = time.getHours());
		}

		if ($$self.$$.dirty & /*time*/ 8) {
			$: $$invalidate(1, minutes = time.getMinutes());
		}

		if ($$self.$$.dirty & /*time*/ 8) {
			$: $$invalidate(0, seconds = time.getSeconds());
		}
	};

	return [seconds, minutes, hours, time];
}

class Clock extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Clock",
			options,
			id: create_fragment.name
		});
	}
}

export { Clock as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xvY2suMmMxYjlmYWMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nsb2NrLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJztcblxuICBsZXQgdGltZSA9IG5ldyBEYXRlKCk7XG5cbiAgLy8gdGhlc2UgYXV0b21hdGljYWxseSB1cGRhdGUgd2hlbiBgdGltZWBcbiAgLy8gY2hhbmdlcywgYmVjYXVzZSBvZiB0aGUgYCQ6YCBwcmVmaXhcbiAgJDogaG91cnMgPSB0aW1lLmdldEhvdXJzKCk7XG4gICQ6IG1pbnV0ZXMgPSB0aW1lLmdldE1pbnV0ZXMoKTtcbiAgJDogc2Vjb25kcyA9IHRpbWUuZ2V0U2Vjb25kcygpO1xuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGltZSA9IG5ldyBEYXRlKCk7XG4gICAgfSwgMTAwMCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgfTtcbiAgfSk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICBzdmcge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBtYXJnaW4tdG9wOiAycmVtO1xuICB9XG5cbiAgLmNsb2NrLWZhY2Uge1xuICAgIHN0cm9rZTogIzMzMztcbiAgICBmaWxsOiB3aGl0ZTtcbiAgfVxuXG4gIC5taW5vciB7XG4gICAgc3Ryb2tlOiAjOTk5O1xuICAgIHN0cm9rZS13aWR0aDogMC41O1xuICB9XG5cbiAgLm1ham9yIHtcbiAgICBzdHJva2U6ICMzMzM7XG4gICAgc3Ryb2tlLXdpZHRoOiAxO1xuICB9XG5cbiAgLmhvdXIge1xuICAgIHN0cm9rZTogIzMzMztcbiAgfVxuXG4gIC5taW51dGUge1xuICAgIHN0cm9rZTogIzY2NjtcbiAgfVxuXG4gIC5zZWNvbmQsXG4gIC5zZWNvbmQtY291bnRlcndlaWdodCB7XG4gICAgc3Ryb2tlOiByZ2IoMTgwLCAwLCAwKTtcbiAgfVxuXG4gIC5zZWNvbmQtY291bnRlcndlaWdodCB7XG4gICAgc3Ryb2tlLXdpZHRoOiAzO1xuICB9XG48L3N0eWxlPlxuXG48c3ZnIHZpZXdCb3g9XCItNTAgLTUwIDEwMCAxMDBcIj5cbiAgPGNpcmNsZSBjbGFzcz1cImNsb2NrLWZhY2VcIiByPVwiNDhcIiAvPlxuXG4gIDwhLS0gbWFya2VycyAtLT5cbiAgeyNlYWNoIFswLCA1LCAxMCwgMTUsIDIwLCAyNSwgMzAsIDM1LCA0MCwgNDUsIDUwLCA1NV0gYXMgbWludXRlfVxuICAgIDxsaW5lIGNsYXNzPVwibWFqb3JcIiB5MT1cIjM1XCIgeTI9XCI0NVwiIHRyYW5zZm9ybT1cInJvdGF0ZSh7MzAgKiBtaW51dGV9KVwiIC8+XG5cbiAgICB7I2VhY2ggWzEsIDIsIDMsIDRdIGFzIG9mZnNldH1cbiAgICAgIDxsaW5lIGNsYXNzPVwibWlub3JcIiB5MT1cIjQyXCIgeTI9XCI0NVwiIHRyYW5zZm9ybT1cInJvdGF0ZSh7NiAqIChtaW51dGUgKyBvZmZzZXQpfSlcIiAvPlxuICAgIHsvZWFjaH1cbiAgey9lYWNofVxuXG4gIDwhLS0gaG91ciBoYW5kIC0tPlxuICA8bGluZSBjbGFzcz1cImhvdXJcIiB5MT1cIjJcIiB5Mj1cIi0yMFwiIHRyYW5zZm9ybT1cInJvdGF0ZSh7MzAgKiBob3VycyArIG1pbnV0ZXMgLyAyfSlcIiAvPlxuXG4gIDwhLS0gbWludXRlIGhhbmQgLS0+XG4gIDxsaW5lIGNsYXNzPVwibWludXRlXCIgeTE9XCI0XCIgeTI9XCItMzBcIiB0cmFuc2Zvcm09XCJyb3RhdGUoezYgKiBtaW51dGVzICsgc2Vjb25kcyAvIDEwfSlcIiAvPlxuXG4gIDwhLS0gc2Vjb25kIGhhbmQgLS0+XG4gIDxnIHRyYW5zZm9ybT1cInJvdGF0ZSh7NiAqIHNlY29uZHN9KVwiPlxuICAgIDxsaW5lIGNsYXNzPVwic2Vjb25kXCIgeTE9XCIxMFwiIHkyPVwiLTM4XCIgLz5cbiAgICA8bGluZSBjbGFzcz1cInNlY29uZC1jb3VudGVyd2VpZ2h0XCIgeTE9XCIxMFwiIHkyPVwiMlwiIC8+XG4gIDwvZz5cbjwvc3ZnPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0VBc0U2RCxDQUFDLGVBQUksR0FBTSxDQUFBLENBQUEsQ0FBQSxjQUFHLEdBQU0sQ0FBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLEdBQUEsQ0FBQSxDQUFBOzs7O0dBQTNFLG9CQUFpRixDQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRDNFLENBQUEsSUFBQSxZQUFBLEdBQUEsQ0FBQSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUZxQyxHQUFBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsV0FBQSxFQUFBLG9CQUFBLEdBQUEsU0FBQSxHQUFBLEVBQUUsY0FBRyxHQUFNLENBQUEsQ0FBQSxDQUFBLEdBQUEsR0FBQSxDQUFBLENBQUE7Ozs7R0FBbEUsb0JBQXVFLENBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7bUJBRGpFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBU0UsR0FBQSxRQUFBLENBQUEsS0FBQSxFQUFBLFdBQUEs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
