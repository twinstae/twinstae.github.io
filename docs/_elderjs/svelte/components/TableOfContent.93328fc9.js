import { v as validate_each_argument, j as element, k as claim_element, l as children, d as detach_dev, o as add_location, i as insert_hydration_dev, G as destroy_each, g as dispatch_dev, y as text, z as space, A as claim_text, B as claim_space, n as attr_dev, C as set_style, E as append_hydration_dev, F as set_data_dev, H as noop, s as validate_slots, S as SvelteComponentDev, w as init, x as safe_not_equal } from '../index-328232cc.js';

/* src/components/TableOfContent.svelte generated by Svelte v3.46.4 */

const file = "src/components/TableOfContent.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (14:8) {#if heading2.children}
function create_if_block(ctx) {
	let ol;
	let each_value_1 = /*heading2*/ ctx[1].children;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ol = claim_element(nodes, "OL", {});
			var ol_nodes = children(ol);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ol_nodes);
			}

			ol_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(ol, file, 14, 8, 293);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, ol, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ol, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tocTree*/ 1) {
				each_value_1 = /*heading2*/ ctx[1].children;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ol, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ol);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(14:8) {#if heading2.children}",
		ctx
	});

	return block;
}

// (16:10) {#each heading2.children as heading3}
function create_each_block_1(ctx) {
	let li;
	let a;
	let t0_value = /*heading3*/ ctx[4].text + "";
	let t0;
	let a_href_value;
	let t1;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { style: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, style: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = "#" + /*heading3*/ ctx[4].id);
			set_style(a, "color", "#868e96");
			add_location(a, file, 17, 14, 402);
			set_style(li, "font-size", "1rem");
			add_location(li, file, 16, 12, 358);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, a);
			append_hydration_dev(a, t0);
			append_hydration_dev(li, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tocTree*/ 1 && t0_value !== (t0_value = /*heading3*/ ctx[4].text + "")) set_data_dev(t0, t0_value);

			if (dirty & /*tocTree*/ 1 && a_href_value !== (a_href_value = "#" + /*heading3*/ ctx[4].id)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(16:10) {#each heading2.children as heading3}",
		ctx
	});

	return block;
}

// (9:4) {#each tocTree as heading2}
function create_each_block(ctx) {
	let li;
	let a;
	let t0_value = /*heading2*/ ctx[1].text + "";
	let t0;
	let a_href_value;
	let t1;
	let t2;
	let if_block = /*heading2*/ ctx[1].children && create_if_block(ctx);

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { style: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, style: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			a_nodes.forEach(detach_dev);
			t1 = claim_space(li_nodes);
			if (if_block) if_block.l(li_nodes);
			t2 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "href", a_href_value = "#" + /*heading2*/ ctx[1].id);
			set_style(a, "color", "#868e96");
			add_location(a, file, 10, 8, 164);
			set_style(li, "font-size", "1.25rem");
			add_location(li, file, 9, 6, 123);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, li, anchor);
			append_hydration_dev(li, a);
			append_hydration_dev(a, t0);
			append_hydration_dev(li, t1);
			if (if_block) if_block.m(li, null);
			append_hydration_dev(li, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tocTree*/ 1 && t0_value !== (t0_value = /*heading2*/ ctx[1].text + "")) set_data_dev(t0, t0_value);

			if (dirty & /*tocTree*/ 1 && a_href_value !== (a_href_value = "#" + /*heading2*/ ctx[1].id)) {
				attr_dev(a, "href", a_href_value);
			}

			if (/*heading2*/ ctx[1].children) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(li, t2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(9:4) {#each tocTree as heading2}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let nav;
	let div;
	let span;
	let t0;
	let t1;
	let ol;
	let each_value = /*tocTree*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			nav = element("nav");
			div = element("div");
			span = element("span");
			t0 = text("목차");
			t1 = space();
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div = claim_element(nav_nodes, "DIV", {});
			var div_nodes = children(div);
			span = claim_element(div_nodes, "SPAN", {});
			var span_nodes = children(span);
			t0 = claim_text(span_nodes, "목차");
			span_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			ol = claim_element(div_nodes, "OL", {});
			var ol_nodes = children(ol);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ol_nodes);
			}

			ol_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(span, file, 6, 4, 60);
			add_location(ol, file, 7, 4, 80);
			add_location(div, file, 5, 2, 50);
			attr_dev(nav, "class", "svelte-s59jxg");
			add_location(nav, file, 4, 0, 42);
		},
		m: function mount(target, anchor) {
			insert_hydration_dev(target, nav, anchor);
			append_hydration_dev(nav, div);
			append_hydration_dev(div, span);
			append_hydration_dev(span, t0);
			append_hydration_dev(div, t1);
			append_hydration_dev(div, ol);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ol, null);
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*tocTree*/ 1) {
				each_value = /*tocTree*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ol, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TableOfContent', slots, []);
	let { tocTree } = $$props;
	const writable_props = ['tocTree'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TableOfContent> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('tocTree' in $$props) $$invalidate(0, tocTree = $$props.tocTree);
	};

	$$self.$capture_state = () => ({ tocTree });

	$$self.$inject_state = $$props => {
		if ('tocTree' in $$props) $$invalidate(0, tocTree = $$props.tocTree);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [tocTree];
}

class TableOfContent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { tocTree: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TableOfContent",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*tocTree*/ ctx[0] === undefined && !('tocTree' in props)) {
			console.warn("<TableOfContent> was created without expected prop 'tocTree'");
		}
	}

	get tocTree() {
		throw new Error("<TableOfContent>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tocTree(value) {
		throw new Error("<TableOfContent>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { TableOfContent as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFibGVPZkNvbnRlbnQuOTMzMjhmYzkuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1RhYmxlT2ZDb250ZW50LnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBleHBvcnQgbGV0IHRvY1RyZWU7XG48L3NjcmlwdD5cblxuPG5hdj5cbiAgPGRpdj5cbiAgICA8c3Bhbj7rqqnssKg8L3NwYW4+XG4gICAgPG9sPlxuICAgIHsjZWFjaCB0b2NUcmVlIGFzIGhlYWRpbmcyfVxuICAgICAgPGxpIHN0eWxlPVwiZm9udC1zaXplOiAxLjI1cmVtO1wiPlxuICAgICAgICA8YSBocmVmPVwiI3toZWFkaW5nMi5pZH1cIiBzdHlsZT1cImNvbG9yOiAjODY4ZTk2O1wiPlxuICAgICAgICAgIHtoZWFkaW5nMi50ZXh0fVxuICAgICAgICA8L2E+XG4gICAgICAgIHsjaWYgaGVhZGluZzIuY2hpbGRyZW59XG4gICAgICAgIDxvbD5cbiAgICAgICAgICB7I2VhY2ggaGVhZGluZzIuY2hpbGRyZW4gYXMgaGVhZGluZzN9XG4gICAgICAgICAgICA8bGkgc3R5bGU9XCJmb250LXNpemU6IDFyZW07XCI+XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCIje2hlYWRpbmczLmlkfVwiIHN0eWxlPVwiY29sb3I6ICM4NjhlOTY7XCI+XG4gICAgICAgICAgICAgICAge2hlYWRpbmczLnRleHR9XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgey9lYWNofVxuICAgICAgICA8L29sPlxuICAgICAgICB7L2lmfVxuICAgICAgPC9saT5cbiAgICB7L2VhY2h9XG4gICAgPC9vbD5cbiAgPC9kaXY+XG48L25hdj5cblxuPHN0eWxlPlxuICBuYXYge1xuICAgIHotaW5kZXg6IDE7XG4gICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1wcmltYXJ5LXRleHQpO1xuICAgIGJvcmRlci1yYWRpdXM6IDAuNXJlbTtcbiAgfVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlaUIsQ0FBQSxJQUFBLFlBQUEsZ0JBQUEsR0FBUSxJQUFDLFFBQVEsQ0FBQTs7OztrQ0FBdEIsTUFBSSxFQUFBLENBQUEsSUFBQSxDQUFBLEVBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBRFIsb0JBUUksQ0FBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBOzs7Ozs7OztBQVBLLElBQUEsWUFBQSxnQkFBQSxHQUFRLElBQUMsUUFBUSxDQUFBOzs7O2lDQUF0QixNQUFJLEVBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQTs7Ozs7Ozs7Ozs7Ozs7OztzQ0FBSixNQUFJLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUdDLENBQUEsSUFBQSxRQUFBLGdCQUFBLEdBQVEsSUFBQyxJQUFJLEdBQUEsRUFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBREwsR0FBQSxRQUFBLENBQUEsQ0FBQSxFQUFBLE1BQUEsRUFBQSxZQUFBLEdBQUEsR0FBQSxnQkFBQSxHQUFRLElBQUMsRUFBRSxDQUFBLENBQUE7Ozs7Ozs7R0FEeEIsb0JBSUksQ0FBQSxNQUFBLEVBQUEsRUFBQSxFQUFBLE1BQUEsQ0FBQSxDQUFBO0dBSEYsb0JBRUcsQ0FBQSxFQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUE7Ozs7O0FBREEsR0FBQSxJQUFBLEtBQUEsZUFBQSxDQUFBLElBQUEsUUFBQSxNQUFBLFFBQUEsZ0JBQUEsR0FBUSxJQUFDLElBQUksR0FBQSxFQUFBLENBQUEsRUFBQSxZQUFBLENBQUEsRUFBQSxFQUFBLFFBQUEsQ0FBQSxDQUFBOztBQURMLEdBQUEsSUFBQSxLQUFBLGVBQUEsQ0FBQSxJQUFBLFlBQUEsTUFBQSxZQUFBLEdBQUEsR0FBQSxnQkFBQSxHQUFRLElBQUMsRUFBRSxDQUFBLEVBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU56QixDQUFBLElBQUEsUUFBQSxnQkFBQSxHQUFRLElBQUMsSUFBSSxHQUFBLEVBQUEsQ0FBQTs7Ozs7QUFFWCxDQUFBLElBQUEsUUFBQSxnQkFBQSxHQUFRLElBQUMsUUFBUSxJQUFBLGVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFIWCxHQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLFlBQUEsR0FBQSxHQUFBLGdCQUFBLEdBQVEsSUFBQyxFQUFFLENBQUEsQ0FBQTs7Ozs7OztHQUR4QixvQkFlSSxDQUFBLE1BQUEsRUFBQSxFQUFBLEVBQUEsTUFBQSxDQUFBLENBQUE7R0FkRixvQkFFRyxDQUFBLEVBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQTs7Ozs7OztBQURBLEdBQUEsSUFBQSxLQUFBLGVBQUEsQ0FBQSxJQUFBLFFBQUEsTUFBQSxRQUFBLGdCQUFBLEdBQVEsSUFBQyxJQUFJLEdBQUEsRUFBQSxDQUFBLEVBQUEsWUFBQSxDQUFBLEVBQUEsRUFBQSxRQUFBLENBQUEsQ0FBQTs7QUFETCxHQUFBLElBQUEsS0FBQSxlQUFBLENBQUEsSUFBQSxZQUFBLE1BQUEsWUFBQSxHQUFBLEdBQUEsZ0JBQUEsR0FBUSxJQUFDLEVBQUUsQ0FBQSxFQUFBOzs7O0FBR2pCLEdBQUEsaUJBQUEsR0FBUSxJQUFDLFFBQVEsRUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs4QkFMbkIsR0FBTyxDQUFBLENBQUEsQ0FBQSxDQUFBOzs7O2dDQUFaLE1BQUksRUFBQSxDQUFBLElBQUEsQ0FBQSxFQUFBOzs7Ozs7Ozs7YUFGQSxJQUFFLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQUYsSUFBRSxDQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBRlosb0JBd0JLLENBQUEsTUFBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLENBQUEsQ0FBQTtHQXZCSCxvQkFzQkssQ0FBQSxHQUFBLEVBQUEsR0FBQSxDQUFBLENBQUE7R0FyQkgsb0JBQWMsQ0FBQSxHQUFBLEVBQUEsSUFBQSxDQUFBLENBQUE7OztHQUNkLG9CQW1CSSxDQUFBLEdBQUEsRUFBQSxFQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7NkJBbEJHLEdBQU8sQ0FBQSxDQUFBLENBQUEsQ0FBQTs7OzsrQkFBWixNQUFJLEVBQUEsQ0FBQSxJQUFBLENBQUEsRUFBQTs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBSixNQUFJLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FQRyxPQUFPLEVBQUEsR0FBQSxPQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
